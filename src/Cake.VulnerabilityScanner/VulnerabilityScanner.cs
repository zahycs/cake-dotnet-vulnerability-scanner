using DependencyBot.Infrastructure.WebClient;
using Microsoft.Net.Http.Headers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Cake.VulnerabilityScanner
{
    public class VulnerabilityScanner
    {
        private static HttpClient _httpClient = new HttpClient();
        public async Task<List<ComponentReport>> ScanAsync(ScanPackagesSettings settings, System.Threading.CancellationToken cancellationToken)
        {
            var scanner = new DependenciesAnalyzer();
            var packages = scanner.GetDependencies(settings.SolutionFile);

            _httpClient.BaseAddress = new Uri(settings.OssIndexBaseUrl);
            _httpClient.DefaultRequestHeaders.Add(HeaderNames.Authorization, settings.OssIndexToken);

            var vulnerabilityClient = new OssIndexWebClient(_httpClient);

            List<string> ossIndexCoordinates = BuildOssIndexCoordinates(settings, packages);

            var reports = await vulnerabilityClient.PostAsync(new ComponentReportRequest
            {
                Coordinates= ossIndexCoordinates
            }, cancellationToken);

            if (settings.FailOnVulnerability && reports.Any(r => r.Vulnerabilities.Any()))
                throw new VulnerabilityException(message: "Vulnerability detected", reports.ToList());

            else return reports.ToList();
        }

        private static List<string> BuildOssIndexCoordinates(ScanPackagesSettings settings, List<PackageInfo> packages)
        {
            var ossIndexCoordinates = new List<string>();

            foreach (var package in packages)
            {
                var builder = new StringBuilder();
                builder.AppendLine(settings.Ecosystem.ToLower());
                builder.AppendLine("/");
                builder.AppendLine(package.PackageId);
                builder.AppendLine("@");
                builder.AppendLine(package.Version);
                ossIndexCoordinates.Add(builder.ToString());
            }

            return ossIndexCoordinates;
        }
    }
}
