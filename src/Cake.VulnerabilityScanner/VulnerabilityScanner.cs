using DependencyBot.Infrastructure.WebClient;
using Microsoft.Extensions.Logging;
using Microsoft.Net.Http.Headers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging.Console;

namespace Cake.VulnerabilityScanner
{
    public class VulnerabilityScanner
    {
        private static HttpClient _httpClient = new HttpClient();
        private static ILogger<VulnerabilityScanner> _logger;
        public VulnerabilityScanner(LogLevel logLevel)
        {
            _logger = CreateLogger(logLevel);
        }
        public async Task<List<ComponentReport>> ScanAsync(ScanPackagesSettings settings, System.Threading.CancellationToken cancellationToken)
        {
            var scanner = new DependenciesAnalyzer();
            var packages = scanner.GetDependencies(settings.SolutionFile);
            _logger.LogInformation("{0} Packages found in the solution {1}", packages.Count, settings.SolutionFile);
            packages.ForEach(p => _logger.LogDebug("{0}:{1}", p.PackageId, p.Version));

            _httpClient.BaseAddress = new Uri(settings.OssIndexBaseUrl);
            _httpClient.DefaultRequestHeaders.Add(HeaderNames.Authorization, settings.OssIndexToken);

            var vulnerabilityClient = new OssIndexWebClient(_httpClient);

            List<string> ossIndexCoordinates = BuildOssIndexCoordinates(settings, packages);

            try
            {
                var reports = await vulnerabilityClient.PostAsync(new ComponentReportRequest
                {
                    Coordinates = ossIndexCoordinates
                }, cancellationToken);

                if (settings.FailOnVulnerability && reports.Any(r => r.Vulnerabilities.Any()))
                    throw new VulnerabilityException(message: "Vulnerability detected", reports.ToList());

                else return reports.ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error calling ossIndex");
                throw ex;
            }

        }

        private static List<string> BuildOssIndexCoordinates(ScanPackagesSettings settings, List<PackageInfo> packages)
        {
            var ossIndexCoordinates = new List<string>();

            foreach (var package in packages)
            {
                var builder = new StringBuilder();
                builder.Append("pkg:");
                builder.Append(settings.Ecosystem.ToLower());
                builder.Append("/");
                builder.Append(package.PackageId);
                builder.Append("@");
                builder.Append(package.Version);
                ossIndexCoordinates.Add(builder.ToString());
                _logger.LogDebug("ossIndexCoordinate : {0}: ", builder.ToString());
            }
            return ossIndexCoordinates;
        }

        private static ILogger<VulnerabilityScanner> CreateLogger(LogLevel logLevel)
        {
            var loggerFactory = new LoggerFactory();
            var consoleLoggerProvider = new ConsoleLoggerProvider(
                new OptionsMonitor<ConsoleLoggerOptions>(
                    new ConsoleLoggerOptions
                    {
                        LogToStandardErrorThreshold = logLevel
                    }));
            loggerFactory.AddProvider(consoleLoggerProvider);
            return loggerFactory.CreateLogger<VulnerabilityScanner>();
        }
    }
}
