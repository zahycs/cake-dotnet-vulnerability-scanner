using System.Collections.Generic;
using System.Threading.Tasks;
using Buildalyzer;
using System.Collections.Concurrent;
using System.IO;
using System.Linq;

namespace Cake.VulnerabilityScanner
{
    public class DependenciesAnalyzer : IDependenciesAnalyzer
    {
        public List<PackageInfo> GetDependencies(string solutionfile)
        {
            var analyzerManager = new AnalyzerManager(solutionfile);

            var packages = new ConcurrentBag<PackageInfo>();
            Parallel.ForEach(analyzerManager.Projects, (project) =>
            {
                var coreProject = DeserializeToObject<DotnetCoreProject>(project.Key);
                var projectName = Path.GetFileNameWithoutExtension(project.Key);
                var PackageReferences = coreProject.ItemGroup.SelectMany(p => p.PackageReference);
                foreach (var packageReference in PackageReferences)
                {
                    packages.Add(new PackageInfo
                    {
                        ProjectName = projectName,
                        PackageId = packageReference.Include,
                        Version = packageReference.Version
                    });
                }
            });
            return packages.ToList();
        }

       
        private T DeserializeToObject<T>(string filepath) where T : class
        {
            System.Xml.Serialization.XmlSerializer ser = new System.Xml.Serialization.XmlSerializer(typeof(T));

            using (StreamReader sr = new StreamReader(filepath))
            {
                return (T)ser.Deserialize(sr);
            }
        }
    }
}