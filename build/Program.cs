
using Cake.Common;
using Cake.Common.Diagnostics;
using Cake.Common.Tools.DotNetCore;
using Cake.Common.Tools.DotNetCore.Build;
using Cake.Common.Tools.DotNetCore.Test;
using Cake.Common.Tools.GitVersion;
using Cake.Core;
using Cake.Core.Diagnostics;
using Cake.Core.IO;
using Cake.Frosting;

return new CakeHost()
            .UseContext<BuildContext>()
            .UseWorkingDirectory("..")
            .InstallTools()
            .Run(args);



public static class ToolsInstaller
{
    public static CakeHost InstallTools(this CakeHost host)
    {
        host.SetToolPath($"./caketools");
        host.InstallTool(new Uri("nuget:?package=GitVersion.CommandLine&version=5.6.8"));
        return host;
    }
}

public class BuildContext : FrostingContext
{
    public string MsBuildConfiguration { get; internal set; }
    public string SolutionFile { get; internal set; }
    public string ApplicationVersion { get; internal set; }

    public BuildContext(ICakeContext context)
        : base(context)
    {
        MsBuildConfiguration = context.Argument("configuration", "Release");
        SolutionFile = "Cake.VulnerabilityScanner.sln";
    }
}

[TaskName("Version")]
[IsDependentOn(typeof(CleanTask))]
public sealed class VersionTask : FrostingTask<BuildContext>
{
    public override void Run(BuildContext context)
    {
        try
        {
            CalculateVersion();
        }
        catch (Exception ex)
        {
            context.Warning($"Error Calculating GitVersion, Retry is in progress, Exception:{ex.Message}");
            CalculateVersion();
        }

        void CalculateVersion()
        {
            const string gitVersionExecutable = "gitversion.exe";
            var version = context.GitVersion(new GitVersionSettings
            {
                ToolPath = new FilePath($"{context.Tools.Resolve(gitVersionExecutable).GetDirectory()}/{gitVersionExecutable}"),
                Verbosity = GitVersionVerbosity.Debug,
                NoFetch = false
            });
            Console.WriteLine($"Version : {version.NuGetVersionV2}");
            context.ApplicationVersion = version.NuGetVersionV2;
        }
    }
}

[TaskName("Clean")]
public sealed class CleanTask : FrostingTask<BuildContext>
{
    public override void Run(BuildContext context)
    {
        context.Log.Information("Cleaning............");
        context.DotNetCoreClean("");
    }
}

[TaskName("Build")]
public sealed class BuildTask : FrostingTask<BuildContext>
{
    public override void Run(BuildContext context)
    {
        context.Log.Information("building............");
        context.DotNetCoreBuild(context.SolutionFile, new DotNetCoreBuildSettings
        {
            Configuration = context.MsBuildConfiguration
        });

    }
}

[TaskName("Test")]
public sealed class TestTask : FrostingTask<BuildContext>
{
    public override void Run(BuildContext context)
    {
        context.Log.Information("building............");
        context.DotNetCoreTest(context.SolutionFile, new DotNetCoreTestSettings
        {
            Configuration = context.MsBuildConfiguration
        });

    }
}

[TaskName("Default")]
[IsDependentOn(typeof(CleanTask))]
[IsDependentOn(typeof(BuildTask))]
[IsDependentOn(typeof(TestTask))]
public class DefaultTask : FrostingTask
{
}